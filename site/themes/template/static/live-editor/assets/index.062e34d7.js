var N=Object.defineProperty;var I=Object.getOwnPropertySymbols;var q=Object.prototype.hasOwnProperty,O=Object.prototype.propertyIsEnumerable;var T=(t,e,r)=>e in t?N(t,e,{enumerable:!0,configurable:!0,writable:!0,value:r}):t[e]=r,b=(t,e)=>{for(var r in e||(e={}))q.call(e,r)&&T(t,r,e[r]);if(I)for(var r of I(e))O.call(e,r)&&T(t,r,e[r]);return t};import{S as x,i as R,s as M,e as k,a as P,b as W,c as D,n as v,d as L,U as $,o as z,f as d,g as V,h as U,j as H,k as A,m as Z,t as G,l as B,p as Y,q as p,R as _,I as J,E as Q,C as u,r as l,M as y,D as w,u as X,v as ee,W as te,w as re}from"./vendor.3a37258e.js";const ne=function(){const e=document.createElement("link").relList;if(e&&e.supports&&e.supports("modulepreload"))return;for(const n of document.querySelectorAll('link[rel="modulepreload"]'))s(n);new MutationObserver(n=>{for(const a of n)if(a.type==="childList")for(const o of a.addedNodes)o.tagName==="LINK"&&o.rel==="modulepreload"&&s(o)}).observe(document,{childList:!0,subtree:!0});function r(n){const a={};return n.integrity&&(a.integrity=n.integrity),n.referrerpolicy&&(a.referrerPolicy=n.referrerpolicy),n.crossorigin==="use-credentials"?a.credentials="include":n.crossorigin==="anonymous"?a.credentials="omit":a.credentials="same-origin",a}function s(n){if(n.ep)return;n.ep=!0;const a=r(n);fetch(n.href,a)}};ne();const ae=`---
apiVersion: carto.run/v1alpha1
kind: ClusterSupplyChain
metadata:
  name: supply-chain
spec:
  selector:
    app.tanzu.vmware.com/workload-type: web

  resources:
    - name: source-provider
      templateRef:
        kind: ClusterSourceTemplate
        name: source

    - name: image-builder
      templateRef:
        kind: ClusterImageTemplate
        name: image
      params:
        - name: image_prefix
          value: "pref-"
      sources:
        - resource: source-provider
          name: source

    - name: config-provider
      templateRef:
        kind: ClusterConfigTemplate
        name: app-config
      images:
        - resource: image-builder
          name: image

    - name: git-writer
      templateRef:
        kind: ClusterTemplate
        name: git-writer
      configs:
        - resource: config-provider
          name: data
`;function se(t){let e;return{c(){e=k("div"),P(e,"class","monaco-editor-container svelte-1xnbi5m"),W(e,"height","400px")},m(r,s){D(r,e,s),t[1](e)},p:v,i:v,o:v,d(r){r&&L(e),t[1](null)}}}function oe(t,e,r){let s;const n=$.parse("https://cartographer.sh/example_sc_1.yaml");z(()=>{d.create(s,{automaticLayout:!0,model:d.createModel(ae,"yaml",n)})});function a(o){V[o?"unshift":"push"](()=>{s=o,r(0,s)})}return[s,a]}class ie extends x{constructor(e){super();R(this,e,oe,se,M,{})}}function ce(t){let e,r,s,n,a;return n=new ie({}),{c(){e=k("main"),r=k("h1"),r.textContent="Cartographer Live Editor",s=U(),H(n.$$.fragment),P(r,"class","svelte-1b7xp7v")},m(o,i){D(o,e,i),A(e,r),A(e,s),Z(n,e,null),a=!0},p:v,i(o){a||(G(n.$$.fragment,o),a=!0)},o(o){B(n.$$.fragment,o),a=!1},d(o){o&&L(e),Y(n)}}}class ue extends x{constructor(e){super();R(this,e,null,ce,M,{})}}var m="yaml";function le(t){switch(t){case w.Error:return y.Error;case w.Warning:return y.Warning;case w.Information:return y.Info;case w.Hint:return y.Hint;default:return y.Info}}function pe(t){return{severity:le(t.severity),startLineNumber:t.range.start.line+1,startColumn:t.range.start.character+1,endLineNumber:t.range.end.line+1,endColumn:t.range.end.character+1,message:t.message,code:String(t.code),source:t.source}}function me(t,e){const r=new Map,s=async i=>{(await t()).resetSchema(String(i))},n=async i=>{const f=(await(await t(i)).doValidation(String(i))).map(pe),C=d.getModel(i);C&&C.getLanguageId()===m&&d.setModelMarkers(C,m,f)},a=i=>{if(i.getLanguageId()!==m)return;let g;r.set(String(i.uri),i.onDidChangeContent(()=>{clearTimeout(g),g=setTimeout(()=>n(i.uri),500)})),n(i.uri)},o=i=>{d.setModelMarkers(i,m,[]);const g=String(i.uri),c=r.get(g);c&&(c.dispose(),r.delete(g))};d.onDidCreateModel(a),d.onWillDisposeModel(i=>{o(i),s(i.uri)}),d.onDidChangeModelLanguage(i=>{o(i.model),a(i.model),s(i.model.uri)}),e.onDidChange(()=>{for(const i of d.getModels())i.getLanguageId()===m&&(o(i),a(i))});for(const i of d.getModels())a(i)}function S(t){if(!!t)return{character:t.column-1,line:t.lineNumber-1}}function h(t){if(!!t)return new _(t.start.line+1,t.start.character+1,t.end.line+1,t.end.character+1)}function de(t){const e=p.CompletionItemKind;switch(t){case u.Text:return e.Text;case u.Method:return e.Method;case u.Function:return e.Function;case u.Constructor:return e.Constructor;case u.Field:return e.Field;case u.Variable:return e.Variable;case u.Class:return e.Class;case u.Interface:return e.Interface;case u.Module:return e.Module;case u.Property:return e.Property;case u.Unit:return e.Unit;case u.Value:return e.Value;case u.Enum:return e.Enum;case u.Keyword:return e.Keyword;case u.Snippet:return e.Snippet;case u.Color:return e.Color;case u.File:return e.File;case u.Reference:return e.Reference;default:return e.Property}}function E(t){if(!!t)return{range:h(t.range),text:t.newText}}function ge(t){return{triggerCharacters:[" ",":"],async provideCompletionItems(e,r){const s=e.uri,a=await(await t(s)).doComplete(String(s),S(r));if(!a)return;const o=e.getWordUntilPosition(r),i=new _(r.lineNumber,o.startColumn,r.lineNumber,o.endColumn),g=a.items.map(c=>{const f={label:c.label,insertText:c.insertText||c.label,sortText:c.sortText,filterText:c.filterText,documentation:c.documentation,detail:c.detail,kind:de(c.kind),range:i};return c.textEdit&&(f.range=h("range"in c.textEdit?c.textEdit.range:c.textEdit.replace),f.insertText=c.textEdit.newText),c.additionalTextEdits&&(f.additionalTextEdits=c.additionalTextEdits.map(E)),c.insertTextFormat===J.Snippet&&(f.insertTextRules=p.CompletionItemInsertTextRule.InsertAsSnippet),f});return{incomplete:a.isIncomplete,suggestions:g}}}}function fe(t){return{async provideDefinition(e,r){const s=e.uri,a=await(await t(s)).doDefinition(String(s),S(r));return a==null?void 0:a.map(o=>({originSelectionRange:o.originSelectionRange,range:h(o.targetRange),targetSelectionRange:o.targetSelectionRange,uri:$.parse(o.targetUri)}))}}}function he(t){return{async provideHover(e,r){const s=e.uri,a=await(await t(s)).doHover(String(s),S(r));if(!!a)return{range:h(a.range),contents:[{value:a.contents.value}]}}}}function ye(t){const e=p.SymbolKind;switch(t){case l.File:return e.Array;case l.Module:return e.Module;case l.Namespace:return e.Namespace;case l.Package:return e.Package;case l.Class:return e.Class;case l.Method:return e.Method;case l.Property:return e.Property;case l.Field:return e.Field;case l.Constructor:return e.Constructor;case l.Enum:return e.Enum;case l.Interface:return e.Interface;case l.Function:return e.Function;case l.Variable:return e.Variable;case l.Constant:return e.Constant;case l.String:return e.String;case l.Number:return e.Number;case l.Boolean:return e.Boolean;case l.Array:return e.Array;default:return e.Function}}function F(t){return{detail:t.detail||"",range:h(t.range),name:t.name,kind:ye(t.kind),selectionRange:h(t.selectionRange),children:t.children.map(F),tags:[]}}function be(t){return{async provideDocumentSymbols(e){const r=e.uri,n=await(await t(r)).findDocumentSymbols(String(r));if(!!n)return n.map(F)}}}function ve(t){return b({tabSize:t.tabSize,insertSpaces:t.insertSpaces},t)}function we(t){return{async provideDocumentFormattingEdits(e,r){const s=e.uri,a=await(await t(s)).format(String(s),ve(r));if(!(!a||a.length===0))return a.map(E)}}}function Ce(t){return{range:h(t.range),tooltip:t.tooltip,url:t.target}}function ke(t){return{async provideLinks(e){const r=e.uri;return{links:(await(await t(r)).findLinks(String(r))).map(Ce)}}}}var Se=2*60*1e3;function Ie(t){let e,r,s=0;const n=()=>{e&&(e.dispose(),e=void 0),r=void 0};setInterval(()=>{if(!e)return;Date.now()-s>Se&&n()},30*1e3),t.onDidChange(()=>n());const a=()=>(s=Date.now(),r||(e=d.createWebWorker({moduleId:"vs/language/yaml/yamlWorker",label:t.languageId,createData:{languageSettings:t.diagnosticsOptions,enableSchemaRequest:t.diagnosticsOptions.enableSchemaRequest,isKubernetes:t.diagnosticsOptions.isKubernetes,customTags:t.diagnosticsOptions.customTags}}),r=e.getProxy()),r);return async(...o)=>{const i=await a();return await e.withSyncedResources(o),i}}var Te={comments:{lineComment:"#"},brackets:[["{","}"],["[","]"],["(",")"]],autoClosingPairs:[{open:"{",close:"}"},{open:"[",close:"]"},{open:"(",close:")"},{open:'"',close:'"'},{open:"'",close:"'"}],surroundingPairs:[{open:"{",close:"}"},{open:"[",close:"]"},{open:"(",close:")"},{open:'"',close:'"'},{open:"'",close:"'"}],onEnterRules:[{beforeText:/:\s*$/,action:{indentAction:p.IndentAction.Indent}}]};function xe(t){const e=Ie(t);p.registerCompletionItemProvider(m,ge(e)),p.registerHoverProvider(m,he(e)),p.registerDefinitionProvider(m,fe(e)),p.registerDocumentSymbolProvider(m,be(e)),p.registerDocumentFormattingEditProvider(m,we(e)),p.registerLinkProvider(m,ke(e)),me(e,t),p.setLanguageConfiguration(m,Te)}var j={completion:!0,customTags:[],enableSchemaRequest:!1,format:!0,isKubernetes:!1,hover:!0,schemas:[],validate:!0,yamlVersion:"1.2"};function Re(t){const e=new Q;let r=t;const s={get onDidChange(){return e.event},get languageId(){return m},get diagnosticsOptions(){return r},setDiagnosticsOptions(n){r=b(b({},j),n),e.fire(s)}};return s}var K=Re(j);function Me(){return{yamlDefaults:K}}p.yaml=Me();p.register({id:m,extensions:[".yaml",".yml"],aliases:["YAML","yaml","YML","yml"],mimetypes:["application/x-yaml"]});p.onLanguage("yaml",()=>{xe(K)});function Pe(t={}){p.yaml.yamlDefaults.setDiagnosticsOptions(t)}function De(){return new Worker("/assets/yaml.worker.309af661.js",{type:"module"})}d.ITextModel;const Le=/(config|image|source)s:/,$e=(t,e)=>{if(t.getLineContent(e).search(/\s+resource:/)<0)return null;let n=e;for(;--n>0;){let o=t.getLineContent(n).match(Le);if(o)return`Cluster${X(o[1])}Template`}return null},Ae=(t,e)=>{let r=t.getValue();try{return ee(r).spec.resources.filter(o=>o.templateRef.kind===e).map(o=>({insertText:o.name,kind:u.Reference,range:void 0,label:o.name}))}catch{}return[]},_e=()=>{p.registerCompletionItemProvider("yaml",{triggerCharacters:[" "],provideCompletionItems(t,e){let r=$e(t,e.lineNumber);return r?{incomplete:!1,suggestions:Ae(t,r)}:null}})};window.MonacoEnvironment={getWorker(t,e){switch(e){case"yaml":return new De;case"javascript":return new re;default:return new te}}};const Ee={properties:{apiVersion:{description:"APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",type:"string"},kind:{description:"Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",type:"string"},metadata:{type:"object"},spec:{description:"Spec describes the suppply chain. More info: https://cartographer.sh/docs/latest/reference/workload/#clustersupplychain",properties:{params:{description:"Additional parameters. See: https://cartographer.sh/docs/latest/architecture/#parameter-hierarchy",items:{properties:{default:{description:"DefaultValue of the parameter. Causes the parameter to be optional; If the Owner does not specify this parameter, this value is used.","x-kubernetes-preserve-unknown-fields":!0},name:{description:"Name of the parameter. Should match a template parameter name.",type:"string"},value:{description:"Value of the parameter. If specified, owner properties are ignored.","x-kubernetes-preserve-unknown-fields":!0}},required:["name"],type:"object"},type:"array"},resources:{description:"Resources that are responsible for bringing the application to a deliverable state.",items:{properties:{configs:{description:`Configs is a list of references to other 'config' resources in this list. A config resource has the kind ClusterConfigTemplate 
 In a template, configs can be consumed as: $(configs.<name>.config)$ 
 If there is only one image, it can be consumed as: $(config)$`,items:{properties:{name:{type:"string"},resource:{type:"string"}},required:["name","resource"],type:"object"},type:"array"},images:{description:`Images is a list of references to other 'image' resources in this list. An image resource has the kind ClusterImageTemplate 
 In a template, images can be consumed as: $(images.<name>.image)$ 
 If there is only one image, it can be consumed as: $(image)$`,items:{properties:{name:{type:"string"},resource:{type:"string"}},required:["name","resource"],type:"object"},type:"array"},name:{description:"Name of the resource. Used as a reference for inputs, as well as being the name presented in workload statuses to identify this resource.",type:"string"},params:{description:`Params are a list of parameters to provide to the template in TemplateRef Template params do not have to be specified here, unless you want to force a particular value, or add a default value. 
 Parameters are consumed in a template with the syntax: $(params.<name>)$`,items:{properties:{default:{description:"DefaultValue of the parameter. Causes the parameter to be optional; If the Owner does not specify this parameter, this value is used.","x-kubernetes-preserve-unknown-fields":!0},name:{description:"Name of the parameter. Should match a template parameter name.",type:"string"},value:{description:"Value of the parameter. If specified, owner properties are ignored.","x-kubernetes-preserve-unknown-fields":!0}},required:["name"],type:"object"},type:"array"},sources:{description:`Sources is a list of references to other 'source' resources in this list. A source resource has the kind ClusterSourceTemplate 
 In a template, sources can be consumed as: $(sources.<name>.url)$ and $(sources.<name>.revision)$ 
 If there is only one source, it can be consumed as: $(source.url)$ and $(source.revision)$`,items:{properties:{name:{type:"string"},resource:{type:"string"}},required:["name","resource"],type:"object"},type:"array"},templateRef:{description:"TemplateRef identifies the template used to produce this resource",properties:{kind:{description:"Kind of the template to apply",enum:["ClusterSourceTemplate","ClusterImageTemplate","ClusterTemplate","ClusterConfigTemplate"],type:"string"},name:{description:"Name of the template to apply",minLength:1,type:"string"}},required:["kind","name"],type:"object"}},required:["name","templateRef"],type:"object"},type:"array"},selector:{additionalProperties:{type:"string"},description:"Specifies the label key-value pairs used to select workloads See: https://cartographer.sh/docs/v0.1.0/architecture/#selectors",type:"object"},serviceAccountRef:{description:`ServiceAccountName refers to the Service account with permissions to create resources submitted by the supply chain. 
 If not set, Cartographer will use serviceAccountName from supply chain. 
 If that is also not set, Cartographer will use the default service account in the workload's namespace.`,properties:{name:{description:"Name of the service account being referred to",type:"string"},namespace:{description:"Namespace of the service account being referred to if omitted, the Owner's namespace is used.",type:"string"}},required:["name"],type:"object"}},required:["resources","selector"],type:"object"},status:{description:"Status conforms to the Kubernetes conventions: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#typical-status-properties",properties:{conditions:{items:{description:'Condition contains details for one aspect of the current state of this API Resource. --- This struct is intended for direct use as an array at the field path .status.conditions.  For example, type FooStatus struct{ // Represents the observations of a foo\'s current state. // Known .status.conditions.type are: "Available", "Progressing", and "Degraded" // +patchMergeKey=type // +patchStrategy=merge // +listType=map // +listMapKey=type Conditions []metav1.Condition `json:"conditions,omitempty" patchStrategy:"merge" patchMergeKey:"type" protobuf:"bytes,1,rep,name=conditions"` \n // other fields }',properties:{lastTransitionTime:{description:"lastTransitionTime is the last time the condition transitioned from one status to another. This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.",format:"date-time",type:"string"},message:{description:"message is a human readable message indicating details about the transition. This may be an empty string.",maxLength:32768,type:"string"},observedGeneration:{description:"observedGeneration represents the .metadata.generation that the condition was set based upon. For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date with respect to the current state of the instance.",format:"int64",minimum:0,type:"integer",maximum:9223372036854776e3},reason:{description:"reason contains a programmatic identifier indicating the reason for the condition's last transition. Producers of specific condition types may define expected values and meanings for this field, and whether the values are considered a guaranteed API. The value should be a CamelCase string. This field may not be empty.",maxLength:1024,minLength:1,pattern:"^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$",type:"string"},status:{description:"status of the condition, one of True, False, Unknown.",enum:["True","False","Unknown"],type:"string"},type:{description:"type of condition in CamelCase or in foo.example.com/CamelCase. --- Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be useful (see .node.status.conditions), the ability to deconflict is important. The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)",maxLength:316,pattern:"^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$",type:"string"}},required:["lastTransitionTime","message","reason","status","type"],type:"object"},type:"array"},observedGeneration:{format:"int64",type:"integer",minimum:-9223372036854776e3,maximum:9223372036854776e3}},type:"object"}},required:["metadata","spec"],type:"object",$schema:"http://json-schema.org/draft-04/schema#"};Pe({enableSchemaRequest:!0,hover:!0,completion:!0,validate:!0,format:!0,schemas:[{uri:"http://cartographer.sh/foo-schema.json",fileMatch:["*.yaml"],schema:Ee}]});_e();new ue({target:document.getElementById("app")});
